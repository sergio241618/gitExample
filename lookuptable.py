# -*- coding: utf-8 -*-
"""lookuptable.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ujeD9SJDLIjPlRQ5y9DZarhn9R77RgOK
"""

import sympy as sp

# 1. Define la variable simbólica y tu función polinomial específica.
x = sp.symbols('x')
poly = 4.28297943e-06*x**2 - 3.83561791e-02*x + 93.92003116191847

# 2. Establece el tamaño de la tabla para un ADC de 12 bits (rango de 0 a 4095).
lut_size = 4096

# 3. Calcula cada valor de la tabla evaluando el polinomio y convirtiéndolo a entero.
print("Generando lookup table...")
lookup = [int(poly.subs(x, i)) for i in range(lut_size)]
print("Tabla generada.")

# 4. Escribe la tabla en el archivo de cabecera 'lookuptable.h'.
with open("lookuptable.h", "w") as f:
    # Se añaden "header guards" para prevenir errores de doble inclusión.
    f.write("#ifndef LOOKUPTABLE_H\n")
    f.write("#define LOOKUPTABLE_H\n\n")

    # Se define el tamaño de la LUT como una constante.
    f.write(f"#define LUT_SIZE {lut_size}\n\n")

    # Se declara el array como estático y constante.
    f.write(f"static const int lookup_table[LUT_SIZE] = {{\n")

    # Se escriben los valores de la tabla, formateados con 8 valores por línea.
    for i, val in enumerate(lookup):
        f.write(f"  {val},")
        if (i + 1) % 8 == 0:
            f.write("\n")

    f.write("};\n\n")

    # Cierre del "header guard".
    f.write("#endif // LOOKUPTABLE_H\n")

print("Archivo 'lookuptable.h' creado exitosamente. ✅")